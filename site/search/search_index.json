{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"credits/","text":"idk","title":"Credits"},{"location":"licence/","text":"MIT License Copyright (c) 2022 utility-rblx Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Permissions Commercial use Modification Distribution Private use Limitations Liability Warranty Conditions License and copyright notice","title":"Licence"},{"location":"todo/","text":"Planning \u00b6 A whole list of things that needs to be done sooner or later... Documentation \u00b6 Http Service Discord Webhooks Reddit API Datastore Service Debounce Service Services \u00b6 Http Service Discord Webhooks Reddit API Datastore Service Debounce Service","title":"Planning"},{"location":"todo/#planning","text":"A whole list of things that needs to be done sooner or later...","title":"Planning"},{"location":"todo/#documentation","text":"Http Service Discord Webhooks Reddit API Datastore Service Debounce Service","title":"Documentation"},{"location":"todo/#services","text":"Http Service Discord Webhooks Reddit API Datastore Service Debounce Service","title":"Services"},{"location":"services/http-service/","text":"Http Service Module \u00b6 Http Service Module Methods GenerateGUID string Encode string UrlEncode string Decode string UrlEncodeList string Http Constructers GetAsync Variant PostAsync Variant GetAsyncAPI Variant PostAsyncAPI_UrlEncoded Variant PostAsyncAPI_JsonEncoded Variant How to access this service local Http = Utility : GetService ( 'Http' ) Methods \u00b6 GenerateGUID string \u00b6 A randomly generated UUID (universally unique identifier) string. This is represented by a 32 hexadecimal (base 16) digits. They are displayed in 5 groups with hyphens separating them. You'll get a total of 36 character, example: 12345-67890-abcde-fghij-klmno Parameter(s) Data wrapped boolean Whether the returned string should be wrapped in {curly braces} Returns Definition string The randomly generated UUIID. Code Example local Http = Utility : GetService ( 'Http' ) local UUID = Http . Methods : GenerateGUID () print ( UUID ) --> Expected output: {12345-67890-abcde-fghij-klmno} Encode string \u00b6 The Encode function will convert your luau table into a JSON object or an array . Follow these guidelines: ( From ROBLOX's documentation ) Keys of the table must be either strings or numbers. If a table contains both, an array takes priority (string keys are ignored). An empty Lua table {} generates an empty JSON array. The value nil is never generated. Cyclic table references cause an error. This function allows values such as inf and nan , which are not valid JSON. This may cause problems if you want to use the outputted JSON elsewhere. Parameter(s) Data json_string string Your JSON string. Returns Definition Variant The returned luau table. Code Example local Http = Utility : GetService ( 'Http' ) local LuaUTable = Http . Methods : Decode ( '{ \"Hello World!\": \"How are you today?\" }' ) print ( LuaUTable ) --> Expected output: { [\"Hello World!\"] = \"How are you today?\" } UrlEncode string \u00b6 The UrlEncode function will make sure that the reserved characters in the string which was given is properly encoded with % with two hexadecimal characters. Parameter(s) Data data string The string (URL) to encode. Returns Definition string The properly encoded string. Code Example local Http = Utility : GetService ( 'Http' ) local Encoded = Http . Methods : UrlEncode ( 'Hello World!' ) print ( Encoded ) --> Expected output: Hello%20World Decode string \u00b6 The Encode function will convert your JSON object or an array table into a luau table. Follow these guidelines: ( From ROBLOX's documentation ) Keys of the table are strings or numbers but not both. If a JSON object contains both, string keys are ignored. An empty JSON object generates an empty Lua table {} . If the input string is not a valid JSON object, this function will throw an error. Parameter(s) Data json_string string Your JSON string. Returns Definition Variant The returned luau table. Code Example local Http = Utility : GetService ( 'Http' ) local LuaUTable = Http . Methods : Decode ( '{ \"Hello World!\": \"How are you today?\" }' ) print ( LuaUTable ) --> Expected output: { [\"Hello World!\"] = \"How are you today?\" } UrlEncodeList string \u00b6 The UrlEncodeList will convert your list into a properly encoded. Same functionality as above. Parameter(s) Data data Variant The luau list to be encoded. Returns Definition string The properly encoded luau list. Code Example local Http = Utility : GetService ( 'Http' ) local Encoded = Http . Methods : UrlEncode ({ 'Hello' , [ 'Lua' ] = 'World!' }) print ( Encoded ) --> Expected output: 1=Hello&Lua=World%21 Http \u00b6 Constructers \u00b6 new() Returns a New Request object. Parameter(s) Data url string The URL to be used for making Get / Post requests. getasync_data Variant Data to be used when making a GetAsync request. postasync_data Variant Data to be used when making a PostAsync request. getasync_data table format { nocache , headers } postasync_data table format { content_type , compress , headers , data } These values can be set before being used in a GetAsync/PostAsync request. GetAsync Variant \u00b6 The GetAsync will send out a HTTP GET request. This does all of the heavy lifting for you. Parameter(s) Data nocache boolean Weather if you want the request to cache the response. Defualt value: false headers Variant Used to specify HTTP request headers. Returns Definition Variant GET request's response data. Code Example local Http = Utility : GetService ( 'Http' ) local HttpObject = Http . new ( 'https://google.com' ) local data = HttpObject : GetAsync () print ( data . success , data . data ) --> Expected output: true, *html data of that webpage* PostAsync Variant \u00b6 The PostAsync will send out a HTTP POST request. Very similar to GetAsync Parameter(s) Data data string Data to be sent to that specific URL. Data MUST be encoded before being used. Use Http.Methods:Encode(list) to help you. content_type HttpContentType Modifies the value in the Content-Type header sent with the request. compress boolean Determines whether the data is compressed (gzipped) when sent. Defualt value: false headers Variant Used to specify HTTP request headers. Returns Definition Variant POST request's request result. Code Example local Http = Utility : GetService ( 'Http' ) local HttpObject = Http . new ( 'https://google.com' ) -- I dont got a good example :/ local data = HttpObject : PostAsync ( Http . Methods : Encode ({ [ 'Best Module?' ] = 'Indeed' , [ 'Do you know?' ] = 'Hello world is a standard code when making a new code file. This can also help illstrate the language \\' s basic syntax.' }) ) print ( data . success , data . data ) --> Expected output: true, *data returned from the website?* GetAsyncAPI Variant \u00b6 This will send a GetAsync request to the URL, and decodes it right after. Very useful when you are getting JSON data from a website. Inherits the same parameters from GetAsync Returns Definition Variant A luau list returned from a API request. Code Example local Http = Utility : GetService ( 'Http' ) local HttpObject = Http . new ( 'https://google.com' ) local data = HttpObject : GetAsync () print ( data ) --> Expected output: { ['somevalue'] = 'something' ... } PostAsyncAPI_UrlEncoded Variant \u00b6 Sends a PostAsync request with the data provided. Automatically URL converts the luau list. Parameter(s) Data data Variant A luau list to be POSTED to that URL. Already encodes the data. Returns Definition Variant Exact data returned from a PostAsync request. Code Example local Http = Utility : GetService ( 'Http' ) local HttpObject = Http . new ( 'https://google.com' ) local data = HttpObject : PostAsyncAPI_UrlEncoded ({ [ 'mmmmmm' ] = 'hot docs ngl' }) print ( data . success , data . data ) --> Expected output: true, *data returned from the website?* PostAsyncAPI_JsonEncoded Variant \u00b6 Sends a PostAsync request with the data provided. Automatically JSON converts the luau list. Parameter(s) Data data Variant A luau list to be POSTED to that URL. (This already encodes the data.) Returns Definition Variant Exact data returned from a PostAsync request. Code Example local Http = Utility : GetService ( 'Http' ) local HttpObject = Http . new ( 'https://google.com' ) local data = HttpObject : PostAsyncAPI_JsonEncoded ({ [ 'mmmmmm' ] = 'hot docs ngl' }) print ( data . success , data . data ) --> Expected output: true, *data returned from the website?*","title":"Http Service Module"},{"location":"services/http-service/#http-service-module","text":"Http Service Module Methods GenerateGUID string Encode string UrlEncode string Decode string UrlEncodeList string Http Constructers GetAsync Variant PostAsync Variant GetAsyncAPI Variant PostAsyncAPI_UrlEncoded Variant PostAsyncAPI_JsonEncoded Variant How to access this service local Http = Utility : GetService ( 'Http' )","title":"Http Service Module"},{"location":"services/http-service/#methods","text":"","title":"Methods"},{"location":"services/http-service/#generateguid-string","text":"A randomly generated UUID (universally unique identifier) string. This is represented by a 32 hexadecimal (base 16) digits. They are displayed in 5 groups with hyphens separating them. You'll get a total of 36 character, example: 12345-67890-abcde-fghij-klmno Parameter(s) Data wrapped boolean Whether the returned string should be wrapped in {curly braces} Returns Definition string The randomly generated UUIID. Code Example local Http = Utility : GetService ( 'Http' ) local UUID = Http . Methods : GenerateGUID () print ( UUID ) --> Expected output: {12345-67890-abcde-fghij-klmno}","title":"GenerateGUID string"},{"location":"services/http-service/#encode-string","text":"The Encode function will convert your luau table into a JSON object or an array . Follow these guidelines: ( From ROBLOX's documentation ) Keys of the table must be either strings or numbers. If a table contains both, an array takes priority (string keys are ignored). An empty Lua table {} generates an empty JSON array. The value nil is never generated. Cyclic table references cause an error. This function allows values such as inf and nan , which are not valid JSON. This may cause problems if you want to use the outputted JSON elsewhere. Parameter(s) Data json_string string Your JSON string. Returns Definition Variant The returned luau table. Code Example local Http = Utility : GetService ( 'Http' ) local LuaUTable = Http . Methods : Decode ( '{ \"Hello World!\": \"How are you today?\" }' ) print ( LuaUTable ) --> Expected output: { [\"Hello World!\"] = \"How are you today?\" }","title":"Encode string"},{"location":"services/http-service/#urlencode-string","text":"The UrlEncode function will make sure that the reserved characters in the string which was given is properly encoded with % with two hexadecimal characters. Parameter(s) Data data string The string (URL) to encode. Returns Definition string The properly encoded string. Code Example local Http = Utility : GetService ( 'Http' ) local Encoded = Http . Methods : UrlEncode ( 'Hello World!' ) print ( Encoded ) --> Expected output: Hello%20World","title":"UrlEncode string"},{"location":"services/http-service/#decode-string","text":"The Encode function will convert your JSON object or an array table into a luau table. Follow these guidelines: ( From ROBLOX's documentation ) Keys of the table are strings or numbers but not both. If a JSON object contains both, string keys are ignored. An empty JSON object generates an empty Lua table {} . If the input string is not a valid JSON object, this function will throw an error. Parameter(s) Data json_string string Your JSON string. Returns Definition Variant The returned luau table. Code Example local Http = Utility : GetService ( 'Http' ) local LuaUTable = Http . Methods : Decode ( '{ \"Hello World!\": \"How are you today?\" }' ) print ( LuaUTable ) --> Expected output: { [\"Hello World!\"] = \"How are you today?\" }","title":"Decode string"},{"location":"services/http-service/#urlencodelist-string","text":"The UrlEncodeList will convert your list into a properly encoded. Same functionality as above. Parameter(s) Data data Variant The luau list to be encoded. Returns Definition string The properly encoded luau list. Code Example local Http = Utility : GetService ( 'Http' ) local Encoded = Http . Methods : UrlEncode ({ 'Hello' , [ 'Lua' ] = 'World!' }) print ( Encoded ) --> Expected output: 1=Hello&Lua=World%21","title":"UrlEncodeList string"},{"location":"services/http-service/#http","text":"","title":"Http"},{"location":"services/http-service/#constructers","text":"new() Returns a New Request object. Parameter(s) Data url string The URL to be used for making Get / Post requests. getasync_data Variant Data to be used when making a GetAsync request. postasync_data Variant Data to be used when making a PostAsync request. getasync_data table format { nocache , headers } postasync_data table format { content_type , compress , headers , data } These values can be set before being used in a GetAsync/PostAsync request.","title":"Constructers"},{"location":"services/http-service/#getasync-variant","text":"The GetAsync will send out a HTTP GET request. This does all of the heavy lifting for you. Parameter(s) Data nocache boolean Weather if you want the request to cache the response. Defualt value: false headers Variant Used to specify HTTP request headers. Returns Definition Variant GET request's response data. Code Example local Http = Utility : GetService ( 'Http' ) local HttpObject = Http . new ( 'https://google.com' ) local data = HttpObject : GetAsync () print ( data . success , data . data ) --> Expected output: true, *html data of that webpage*","title":"GetAsync Variant"},{"location":"services/http-service/#postasync-variant","text":"The PostAsync will send out a HTTP POST request. Very similar to GetAsync Parameter(s) Data data string Data to be sent to that specific URL. Data MUST be encoded before being used. Use Http.Methods:Encode(list) to help you. content_type HttpContentType Modifies the value in the Content-Type header sent with the request. compress boolean Determines whether the data is compressed (gzipped) when sent. Defualt value: false headers Variant Used to specify HTTP request headers. Returns Definition Variant POST request's request result. Code Example local Http = Utility : GetService ( 'Http' ) local HttpObject = Http . new ( 'https://google.com' ) -- I dont got a good example :/ local data = HttpObject : PostAsync ( Http . Methods : Encode ({ [ 'Best Module?' ] = 'Indeed' , [ 'Do you know?' ] = 'Hello world is a standard code when making a new code file. This can also help illstrate the language \\' s basic syntax.' }) ) print ( data . success , data . data ) --> Expected output: true, *data returned from the website?*","title":"PostAsync Variant"},{"location":"services/http-service/#getasyncapi-variant","text":"This will send a GetAsync request to the URL, and decodes it right after. Very useful when you are getting JSON data from a website. Inherits the same parameters from GetAsync Returns Definition Variant A luau list returned from a API request. Code Example local Http = Utility : GetService ( 'Http' ) local HttpObject = Http . new ( 'https://google.com' ) local data = HttpObject : GetAsync () print ( data ) --> Expected output: { ['somevalue'] = 'something' ... }","title":"GetAsyncAPI Variant"},{"location":"services/http-service/#postasyncapi_urlencoded-variant","text":"Sends a PostAsync request with the data provided. Automatically URL converts the luau list. Parameter(s) Data data Variant A luau list to be POSTED to that URL. Already encodes the data. Returns Definition Variant Exact data returned from a PostAsync request. Code Example local Http = Utility : GetService ( 'Http' ) local HttpObject = Http . new ( 'https://google.com' ) local data = HttpObject : PostAsyncAPI_UrlEncoded ({ [ 'mmmmmm' ] = 'hot docs ngl' }) print ( data . success , data . data ) --> Expected output: true, *data returned from the website?*","title":"PostAsyncAPI_UrlEncoded Variant"},{"location":"services/http-service/#postasyncapi_jsonencoded-variant","text":"Sends a PostAsync request with the data provided. Automatically JSON converts the luau list. Parameter(s) Data data Variant A luau list to be POSTED to that URL. (This already encodes the data.) Returns Definition Variant Exact data returned from a PostAsync request. Code Example local Http = Utility : GetService ( 'Http' ) local HttpObject = Http . new ( 'https://google.com' ) local data = HttpObject : PostAsyncAPI_JsonEncoded ({ [ 'mmmmmm' ] = 'hot docs ngl' }) print ( data . success , data . data ) --> Expected output: true, *data returned from the website?*","title":"PostAsyncAPI_JsonEncoded Variant"}]}